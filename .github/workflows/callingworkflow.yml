name: Call a reusable workflow and use its outputs

on:
  workflow_dispatch:
  repository_dispatch:
   
permissions:
  actions: read
  contents: read

jobs:
  job1:
   runs-on: ubuntu-latest
   outputs:
      output1: ${{ steps.trigger-step2.outputs.output1 }}
   steps: 
   
     - name: Trigger the Workflow in auto gatling execution Repository
       id: trigger-step
       uses: the-actions-org/workflow-dispatch@v4 
       with:
           workflow: Another Workflow
           repo: annamalaiponnusamy/repo_02
           token: ${{ secrets.ACTIONS_KEY  }}
           workflow-logs: json-output
           wait-for-completion-timeout: 30s
           wait-for-completion-interval: 10s
           display-workflow-run-url-interval: 5s
           display-workflow-run-url-timeout: 5s  
           wait-for-completion: true
           inputs: >-
            {
            "run-name": "12345"
            }

     - name: Get Job Logs by Output
       id: get_job_names1
       shell: sh
       run: |
        #curl -H "Authorization: Bearer ${{ secrets.ACTIONS_KEY }}" \
        JOBS_URL="https://api.github.com/repos/annamalaiponnusamy/repo_02/actions/runs/${{ steps.trigger-step.outputs.workflow-id }}/jobs"
        JOBS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.ACTIONS_KEY }}" $JOBS_URL)
        #  https://api.github.com/repos/annamalaiponnusamy/repo_02/actions/runs/${{ steps.trigger-step.outputs.workflow-id }}/jobs  > workflow_run.json \
        #| jq '.jobs[].steps[1].name' | tee step_names.txt 
        #| jq  '.jobs[] | select(.name == "Generate output") | .steps[].name' | tee step_names.txt
         
        JOB_ID=$(echo $JOBS_RESPONSE | jq -r --arg JOB_NAME "example_job" '.jobs[] | select(.name == $JOB_NAME) | .id')
        echo "Fetching logs for job ID $JOB_ID ..."
        LOGS_URL="https://api.github.com/repos/annamalaiponnusamy/repo_02/actions/jobs/37448410242/logs"
        
        LOGS_RESPONSE=$(curl -s -H "Authorization: token  ${{ secrets.ACTIONS_KEY }}" $LOGS_URL)
        #curl -s -H "Authorization:  Bearer ${{ secrets.ACTIONS_KEY }}" $LOGS_URL -o job_$JOB_ID.log
        echo "Logs for job ID $JOB_ID saved to job_$JOB_ID.log"

        echo "$LOGS_RESPONSE" > job_$JOB_ID.log

        echo "$LOGS_RESPONSE" | jq '.steps[] | select(.conclusion == "success") | .outputs // empty'


        # Extract step output variable value from logs
        STEP_OUTPUT=$(echo "$LOGS_RESPONSE" | jq -r --arg STEP_NAME "GetRunIDFromS3Object" '.steps[] | select(.name == $STEP_NAME) | .output')

        if [ -n "$STEP_OUTPUT" ]; then
          echo "Output for step '$STEP_NAME': $STEP_OUTPUT"
        else
          echo "No output found for step '$STEP_NAME' in job '$JOB_NAME'."
        fi


        # *** DEBUGGING - Verify file existence and content ***
        echo "--- Checking if job_$JOB_ID.log exists ---"
        ls -l job_$JOB_ID.log || echo "job_$JOB_ID.log does NOT exist" # Check if file exists, if not, say so
        echo "--- Content of job_$JOB_ID.log ---"
        cat job_$JOB_ID.log || echo "job_$JOB_ID.log is EMPTY or cannot be read" # Print file content, if empty or not readable, say so
        echo "--- End of job_$JOB_ID.log content ---"
        # *** END DEBUGGING ***

        OUTPUT_VARIABLE=$(jq -r '.jobclusterstatus' job_$JOB_ID.log)
        echo "Output variable value: $OUTPUT_VARIABLE"
 
     - name: Get Job Logs
       id: get_job_names
       run: |
        curl -H "Authorization: Bearer ${{ secrets.ACTIONS_KEY }}" \
        https://api.github.com/repos/annamalaiponnusamy/repo_02/actions/runs/${{ steps.trigger-step.outputs.workflow-id }}/jobs  > workflow_run.json \
        #| jq '.jobs[].steps[1].name' | tee step_names.txt 
        #| jq  '.jobs[] | select(.name == "Generate output") | .steps[].name' | tee step_names.txt
     - name: Extract Step Names
       run: |
        jq -r '.jobs[] | select(.name == "Generate output") | .steps[].name' < workflow_run.json | tee step_names.txt
    
     - name: Display Step Names
       run: |
        tr -d '"' < step_names.txt > step_names_no_quotes.txt
        name=$(cat step_names_no_quotes.txt)
        IFS=' ' read -r -a splitRunIdWithDate <<< "$name"
        echo "Run ID: ${splitRunIdWithDate[2]}" 
        echo "Step Names: $name"
            if [[ "${name}" == *"automationsuccess1"* ]]; then
            echo "response-output=pass" >> $GITHUB_OUTPUT  
            echo "pass"
            else
            echo "response-output=fail" >> $GITHUB_OUTPUT
             echo "fail"
            fi
            
           

     - name: Filter name from Step Names
       run: |
            stepName=$(sed -n '2p' step_names_no_quotes.txt)
            echo "The value of the 5th line is: $stepName"
            # Print the value
            IFS=',' read -r -a splitStepName <<< "$stepName"
            echo "Run ID: ${splitStepName[2]}"
            echo "response-output=${splitStepName[2]}" >> $GITHUB_OUTPUT

            str="   Hello, World!   "
            trimmed_str=$(echo "$str" | xargs)
            
            # Output the trimmed string
            echo "Original string: '$str'"
            echo "Trimmed string: '$trimmed_str'"
            echo "IsRecording: ${trimmed_str}"
            
     - name: Fetch remote job output
       run: |
           curl -H "Authorization: Bearer ${{ secrets.ACTIONS_KEY }}" \
                https://api.github.com/repos/annamalaiponnusamy/repo_02/actions/runs/${{ steps.trigger-step.outputs.workflow-id }}/jobs \
                 | jq '.jobs[] | select(.name == "example_job") | .steps[] | .outputs'
